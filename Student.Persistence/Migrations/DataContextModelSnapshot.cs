// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Student.Persistence;

#nullable disable

namespace Student.Persistence.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CourseDepartment", b =>
                {
                    b.Property<string>("CoursesCourseCode")
                        .HasColumnType("text");

                    b.Property<string>("DepartmentsDepartmentId")
                        .HasColumnType("text");

                    b.HasKey("CoursesCourseCode", "DepartmentsDepartmentId");

                    b.HasIndex("DepartmentsDepartmentId");

                    b.ToTable("CourseDepartment");
                });

            modelBuilder.Entity("CourseStudent", b =>
                {
                    b.Property<string>("CoursesCourseCode")
                        .HasColumnType("text");

                    b.Property<string>("StudentsAdmissionNumber")
                        .HasColumnType("text");

                    b.HasKey("CoursesCourseCode", "StudentsAdmissionNumber");

                    b.HasIndex("StudentsAdmissionNumber");

                    b.ToTable("CourseStudent");
                });

            modelBuilder.Entity("Student.Model.Course", b =>
                {
                    b.Property<string>("CourseCode")
                        .HasColumnType("text");

                    b.Property<string>("CourseTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CreditLoad")
                        .HasColumnType("integer");

                    b.HasKey("CourseCode");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("Student.Model.Department", b =>
                {
                    b.Property<string>("DepartmentId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("DepartmentId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("Student.Model.Student", b =>
                {
                    b.Property<string>("AdmissionNumber")
                        .HasColumnType("text");

                    b.Property<string>("DepartmentId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("AdmissionNumber");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("Student.Model.User", b =>
                {
                    b.Property<string>("AdmissionNumber")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.HasKey("AdmissionNumber");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CourseDepartment", b =>
                {
                    b.HasOne("Student.Model.Course", null)
                        .WithMany()
                        .HasForeignKey("CoursesCourseCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Student.Model.Department", null)
                        .WithMany()
                        .HasForeignKey("DepartmentsDepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CourseStudent", b =>
                {
                    b.HasOne("Student.Model.Course", null)
                        .WithMany()
                        .HasForeignKey("CoursesCourseCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Student.Model.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentsAdmissionNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Student.Model.Student", b =>
                {
                    b.HasOne("Student.Model.Department", "Department")
                        .WithMany("Students")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Student.Model.Department", b =>
                {
                    b.Navigation("Students");
                });
#pragma warning restore 612, 618
        }
    }
}
